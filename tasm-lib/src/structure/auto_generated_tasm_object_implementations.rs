use triton_vm::prelude::*;
use triton_vm::proof_item::FriResponse;
use twenty_first::util_types::mmr::mmr_accumulator::MmrAccumulator;
use twenty_first::util_types::mmr::mmr_membership_proof::MmrMembershipProof;

// Autogenerated `TasmObject` implementation of `MmrMembershipProof`. Generated on Dec 12, 2023. Head was: f4f39ae856c75fc75c17efe33d8109294621a01d
impl ::tasm_lib::structure::tasm_object::TasmObject for MmrMembershipProof<Tip5> {
    fn get_field(field_name: &str) -> Vec<triton_vm::instruction::LabelledInstruction> {
        match field_name {
            "authentication_path" => {
                let current = {
                    if let Some(size) =  <Vec<Digest>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
          }else {
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
          }
                };
                let getter = {
                    if<Vec<Digest>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length().is_some(){
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Pop(::triton_vm::op_stack::NumberOfWords::N1)),].to_vec()
          }else {
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Pop(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
          }
                };
                [current, getter].concat()
            }
            unknown_field_name => panic!("Cannot match on field name `{unknown_field_name}`."),
        }
    }
    fn get_field_with_size(field_name: &str) -> Vec<triton_vm::instruction::LabelledInstruction> {
        match field_name {
            "authentication_path" => {
                let current = {
                    if let Some(size) =  <Vec<Digest>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
          }else {
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
          }
                };
                let getter_sizer = {
                    if<Vec<Digest>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length().is_some(){
            std::vec::Vec:: <triton_vm::instruction::LabelledInstruction> ::new()
          }else {
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(-BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(triton_vm::op_stack::OpStackElement::ST1)),].to_vec()
          }
                };
                [current, getter_sizer].concat()
            }
            unknown_field_name => panic!("Cannot match on field name `{unknown_field_name}`."),
        }
    }
    fn get_field_start_with_jump_distance(
        field_name: &str,
    ) -> Vec<triton_vm::instruction::LabelledInstruction> {
        match field_name {
            "authentication_path" => {
                if let Some(size) =
                    <Vec<Digest> as twenty_first::math::bfield_codec::BFieldCodec>::static_length()
                {
                    [triton_vm::instruction::LabelledInstruction::Instruction(
                        triton_vm::instruction::AnInstruction::Push(BFieldElement::new(
                            size as u64,
                        )),
                    )]
                    .to_vec()
                } else {
                    [
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::ReadMem(
                                ::triton_vm::op_stack::NumberOfWords::N1,
                            ),
                        ),
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64)),
                        ),
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Add,
                        ),
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Swap(
                                ::triton_vm::op_stack::OpStackElement::ST1,
                            ),
                        ),
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64)),
                        ),
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Add,
                        ),
                    ]
                    .to_vec()
                }
            }
            unknown_field_name => panic!("Cannot match on field name `{unknown_field_name}`."),
        }
    }
    fn decode_iter<Itr: Iterator<Item = BFieldElement>>(
        iterator: &mut Itr,
    ) -> ::std::result::Result<
        ::std::boxed::Box<Self>,
        ::std::boxed::Box<dyn std::error::Error + ::core::marker::Send + ::core::marker::Sync>,
    > {
        let length: usize = if let Some(static_length) =
            <Vec<Digest> as twenty_first::math::bfield_codec::BFieldCodec>::static_length()
        {
            static_length
        } else {
            iterator.next().unwrap().value() as usize
        };
        let sequence = (0..length)
            .map(|_| iterator.next().unwrap())
            .collect::<Vec<_>>();
        let authentication_path: Vec<Digest> =
            *twenty_first::math::bfield_codec::BFieldCodec::decode(&sequence)?;
        ::std::result::Result::Ok(::std::boxed::Box::new(Self::new(authentication_path)))
    }
}

// Autogenerated `TasmObject` implementation of `MmrAccumulator`. Generated on Dec 12, 2023. Head was: f4f39ae856c75fc75c17efe33d8109294621a01d
impl ::tasm_lib::structure::tasm_object::TasmObject
    for MmrAccumulator<twenty_first::math::tip5::Tip5>
{
    fn get_field(field_name: &str) -> Vec<triton_vm::instruction::LabelledInstruction> {
        match field_name {
            "peaks" => {
                let current = {
                    if let Some(size) =  <Vec<Digest>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
          }else {
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
          }
                };
                let getter = {
                    if<Vec<Digest>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length().is_some(){
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Pop(::triton_vm::op_stack::NumberOfWords::N1)),].to_vec()
          }else {
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Pop(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
          }
                };
                [current, getter].concat()
            }
            "leaf_count" => {
                let current = {
                    [Self::get_field_start_with_jump_distance("peaks"),[triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add)].to_vec(),{
            if let Some(size) =  <u64 as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
            }else {
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
            }
          },].concat()
                };
                let getter = {
                    if <u64 as twenty_first::math::bfield_codec::BFieldCodec>::static_length()
                        .is_some()
                    {
                        [triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Pop(
                                ::triton_vm::op_stack::NumberOfWords::N1,
                            ),
                        )]
                        .to_vec()
                    } else {
                        [
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Pop(
                                    ::triton_vm::op_stack::NumberOfWords::N1,
                                ),
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Push(BFieldElement::new(
                                    1u64,
                                )),
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Add,
                            ),
                        ]
                        .to_vec()
                    }
                };
                [current, getter].concat()
            }
            unknown_field_name => panic!("Cannot match on field name `{unknown_field_name}`."),
        }
    }
    fn get_field_with_size(field_name: &str) -> Vec<triton_vm::instruction::LabelledInstruction> {
        match field_name {
            "peaks" => {
                let current = {
                    if let Some(size) =  <Vec<Digest>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
          }else {
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
          }
                };
                let getter_sizer = {
                    if<Vec<Digest>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length().is_some(){
            std::vec::Vec:: <triton_vm::instruction::LabelledInstruction> ::new()
          }else {
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(-BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(triton_vm::op_stack::OpStackElement::ST1)),].to_vec()
          }
                };
                [current, getter_sizer].concat()
            }
            "leaf_count" => {
                let current = {
                    [Self::get_field_start_with_jump_distance("peaks"),[triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add)].to_vec(),{
            if let Some(size) =  <u64 as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
            }else {
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
            }
          },].concat()
                };
                let getter_sizer = {
                    if <u64 as twenty_first::math::bfield_codec::BFieldCodec>::static_length()
                        .is_some()
                    {
                        std::vec::Vec::<triton_vm::instruction::LabelledInstruction>::new()
                    } else {
                        [
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Push(-BFieldElement::new(
                                    1u64,
                                )),
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Add,
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Swap(
                                    triton_vm::op_stack::OpStackElement::ST1,
                                ),
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Push(BFieldElement::new(
                                    1u64,
                                )),
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Add,
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Swap(
                                    triton_vm::op_stack::OpStackElement::ST1,
                                ),
                            ),
                        ]
                        .to_vec()
                    }
                };
                [current, getter_sizer].concat()
            }
            unknown_field_name => panic!("Cannot match on field name `{unknown_field_name}`."),
        }
    }
    fn get_field_start_with_jump_distance(
        field_name: &str,
    ) -> Vec<triton_vm::instruction::LabelledInstruction> {
        match field_name {
            "peaks" => {
                if let Some(size) =
                    <Vec<Digest> as twenty_first::math::bfield_codec::BFieldCodec>::static_length()
                {
                    [triton_vm::instruction::LabelledInstruction::Instruction(
                        triton_vm::instruction::AnInstruction::Push(BFieldElement::new(
                            size as u64,
                        )),
                    )]
                    .to_vec()
                } else {
                    [
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::ReadMem(
                                ::triton_vm::op_stack::NumberOfWords::N1,
                            ),
                        ),
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64)),
                        ),
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Add,
                        ),
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Swap(
                                ::triton_vm::op_stack::OpStackElement::ST1,
                            ),
                        ),
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64)),
                        ),
                        triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Add,
                        ),
                    ]
                    .to_vec()
                }
            }
            "leaf_count" => {
                let prev = [
                    Self::get_field_start_with_jump_distance("peaks"),
                    [triton_vm::instruction::LabelledInstruction::Instruction(
                        triton_vm::instruction::AnInstruction::Add,
                    )]
                    .to_vec(),
                ]
                .concat();
                let jumper = {
                    if let Some(size) =
                        <u64 as twenty_first::math::bfield_codec::BFieldCodec>::static_length()
                    {
                        [triton_vm::instruction::LabelledInstruction::Instruction(
                            triton_vm::instruction::AnInstruction::Push(BFieldElement::new(
                                size as u64,
                            )),
                        )]
                        .to_vec()
                    } else {
                        [
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::ReadMem(
                                    ::triton_vm::op_stack::NumberOfWords::N1,
                                ),
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Push(BFieldElement::new(
                                    1u64,
                                )),
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Add,
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Swap(
                                    ::triton_vm::op_stack::OpStackElement::ST1,
                                ),
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Push(BFieldElement::new(
                                    1u64,
                                )),
                            ),
                            triton_vm::instruction::LabelledInstruction::Instruction(
                                triton_vm::instruction::AnInstruction::Add,
                            ),
                        ]
                        .to_vec()
                    }
                };
                [prev, jumper].concat()
            }
            unknown_field_name => panic!("Cannot match on field name `{unknown_field_name}`."),
        }
    }
    fn decode_iter<Itr: Iterator<Item = BFieldElement>>(
        iterator: &mut Itr,
    ) -> ::std::result::Result<
        ::std::boxed::Box<Self>,
        ::std::boxed::Box<dyn std::error::Error + ::core::marker::Send + ::core::marker::Sync>,
    > {
        let length: usize = if let Some(static_length) =
            <Vec<Digest> as twenty_first::math::bfield_codec::BFieldCodec>::static_length()
        {
            static_length
        } else {
            iterator.next().unwrap().value() as usize
        };
        let sequence = (0..length)
            .map(|_| iterator.next().unwrap())
            .collect::<Vec<_>>();
        let peaks: Vec<Digest> = *twenty_first::math::bfield_codec::BFieldCodec::decode(&sequence)?;
        let length: usize = if let Some(static_length) =
            <u64 as twenty_first::math::bfield_codec::BFieldCodec>::static_length()
        {
            static_length
        } else {
            iterator.next().unwrap().value() as usize
        };
        let sequence = (0..length)
            .map(|_| iterator.next().unwrap())
            .collect::<Vec<_>>();
        let leaf_count: u64 = *twenty_first::math::bfield_codec::BFieldCodec::decode(&sequence)?;
        ::std::result::Result::Ok(::std::boxed::Box::new(Self::init(peaks, leaf_count)))
    }
}

// Autogenerated `TasmObject` implementation of `FriResponse`. Generated on Dec 12, 2023. Head was: f4f39ae856c75fc75c17efe33d8109294621a01d
impl ::tasm_lib::structure::tasm_object::TasmObject for FriResponse {
    fn get_field(field_name: &str) -> Vec<triton_vm::instruction::LabelledInstruction> {
        match field_name {
            "revealed_leaves" => {
                let current = {
                    if let Some(size) =  <Vec<XFieldElement>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
            }else {
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
            }
                };
                let getter = {
                    if<Vec<XFieldElement>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length().is_some(){
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Pop(::triton_vm::op_stack::NumberOfWords::N1)),].to_vec()
            }else {
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Pop(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
            }
                };
                [current, getter].concat()
            }
            "auth_structure" => {
                let current = {
                    [Self::get_field_start_with_jump_distance("revealed_leaves"),[triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add)].to_vec(),{
              if let Some(size) =  <Vec<Digest> as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
                [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
              }else {
                [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
              }
            },].concat()
                };
                let getter = {
                    if<Vec<Digest> as twenty_first::math::bfield_codec::BFieldCodec> ::static_length().is_some(){
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Pop(::triton_vm::op_stack::NumberOfWords::N1)),].to_vec()
            }else {
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Pop(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
            }
                };
                [current, getter].concat()
            }
            unknown_field_name => panic!("Cannot match on field name `{unknown_field_name}`."),
        }
    }
    fn get_field_with_size(field_name: &str) -> Vec<triton_vm::instruction::LabelledInstruction> {
        match field_name {
            "revealed_leaves" => {
                let current = {
                    if let Some(size) =  <Vec<XFieldElement>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
            }else {
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
            }
                };
                let getter_sizer = {
                    if<Vec<XFieldElement>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length().is_some(){
              std::vec::Vec:: <triton_vm::instruction::LabelledInstruction> ::new()
            }else {
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(-BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(triton_vm::op_stack::OpStackElement::ST1)),].to_vec()
            }
                };
                [current, getter_sizer].concat()
            }
            "auth_structure" => {
                let current = {
                    [Self::get_field_start_with_jump_distance("revealed_leaves"),[triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add)].to_vec(),{
              if let Some(size) =  <Vec<Digest> as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
                [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
              }else {
                [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
              }
            },].concat()
                };
                let getter_sizer = {
                    if<Vec<Digest> as twenty_first::math::bfield_codec::BFieldCodec> ::static_length().is_some(){
              std::vec::Vec:: <triton_vm::instruction::LabelledInstruction> ::new()
            }else {
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(-BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(triton_vm::op_stack::OpStackElement::ST1)),].to_vec()
            }
                };
                [current, getter_sizer].concat()
            }
            unknown_field_name => panic!("Cannot match on field name `{unknown_field_name}`."),
        }
    }
    fn get_field_start_with_jump_distance(
        field_name: &str,
    ) -> Vec<triton_vm::instruction::LabelledInstruction> {
        match field_name {
            "revealed_leaves" => {
                if let Some(size) =  <Vec<XFieldElement>as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
          }else {
            [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
          }
            }
            "auth_structure" => {
                let prev = [
                    Self::get_field_start_with_jump_distance("revealed_leaves"),
                    [triton_vm::instruction::LabelledInstruction::Instruction(
                        triton_vm::instruction::AnInstruction::Add,
                    )]
                    .to_vec(),
                ]
                .concat();
                let jumper = {
                    if let Some(size) =  <Vec<Digest> as twenty_first::math::bfield_codec::BFieldCodec> ::static_length(){
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(size as u64)))].to_vec()
            }else {
              [triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::ReadMem(::triton_vm::op_stack::NumberOfWords::N1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Swap(::triton_vm::op_stack::OpStackElement::ST1)),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Push(BFieldElement::new(1u64))),triton_vm::instruction::LabelledInstruction::Instruction(triton_vm::instruction::AnInstruction::Add),].to_vec()
            }
                };
                [prev, jumper].concat()
            }
            unknown_field_name => panic!("Cannot match on field name `{unknown_field_name}`."),
        }
    }
    fn decode_iter<Itr: Iterator<Item = BFieldElement>>(
        iterator: &mut Itr,
    ) -> ::std::result::Result<
        ::std::boxed::Box<Self>,
        ::std::boxed::Box<dyn std::error::Error + ::core::marker::Send + ::core::marker::Sync>,
    > {
        let length: usize = if let Some(static_length) =
            <Vec<XFieldElement> as twenty_first::math::bfield_codec::BFieldCodec>::static_length()
        {
            static_length
        } else {
            iterator.next().unwrap().value() as usize
        };
        let sequence = (0..length)
            .map(|_| iterator.next().unwrap())
            .collect::<Vec<_>>();
        let revealed_leaves: Vec<XFieldElement> =
            *twenty_first::math::bfield_codec::BFieldCodec::decode(&sequence)?;
        let length: usize = if let Some(static_length) =
            <Vec<Digest> as twenty_first::math::bfield_codec::BFieldCodec>::static_length()
        {
            static_length
        } else {
            iterator.next().unwrap().value() as usize
        };
        let sequence = (0..length)
            .map(|_| iterator.next().unwrap())
            .collect::<Vec<_>>();
        let auth_structure: Vec<Digest> =
            *twenty_first::math::bfield_codec::BFieldCodec::decode(&sequence)?;
        ::std::result::Result::Ok(::std::boxed::Box::new(Self {
            revealed_leaves,
            auth_structure,
        }))
    }
}
